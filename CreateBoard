import random

def shuffle_deck(deck):
    '''(list of str)->None
       Shuffles the given list of strings representing the playing deck    
    '''
    
    print ('Shuffling the deck...')
    random.shuffle(deck)

def create_board(size):
    '''int->list of str
       Precondition: size is even positive integer between 2 and 52
       Returns a rigorous deck (i.e. board) of a given size.
    '''
    board = [None] * int(size)

    letter='A'
    for i in range(len(board) // 2):
          board[i] = letter
          board[i + len(board) // 2] = board[i]
          letter = chr(ord(letter) + 1)
    return board

def print_board(a):
    '''(list of str)->None
       Prints the current board in a nicely formated way
    '''
    for i in range(len(a)):
        print('{0:4}'.format(a[i]), end=' ')
    print()
    for i in range(len(a)):
        print('{0:4}'.format(str(i+1)), end=' ')

def wait_for_player():
    '''()->None
    Pauses the program/game until the player presses enter
    '''
    input("\nPress enter to continue. ")
    print()

def print_revealed(discovered, p1, p2, original_board):
    '''(list of str, int, int, list of str)->None
    Prints the current board with the two new positions (p1 & p2) revealed from the original board
    Preconditions: p1 & p2 must be integers ranging from 1 to the length of the board
    '''
    printed_board = []

    for i in range(len(original_board)):
        if i in discovered or i == p1 or i == p2:
            printed_board += [original_board[i]]
        else:
            printed_board += ['*']

    print_board(printed_board)
    print('')
    

#############################################################################
#   FUNCTIONS FOR OPTION 2 (with the board being read from a given file)    #
#############################################################################

def read_raw_board(file):
    '''str->list of str
    Returns a list of strings represeniting a deck of cards that was stored in a file. 
    The deck may not necessarifly be playable
    '''
    raw_board = open(file).read().splitlines()
    for i in range(len(raw_board)):
        raw_board[i]=raw_board[i].strip()
    return raw_board


def clean_up_board(board):
    '''list of str->list of str

    The functions takes as input a list of strings representing a deck of cards. 
    It returns a new list containing the same cards as l except that
    one of each cards that appears odd number of times in l is removed
    and all the cards with a * on their face sides are removed
    '''
    print("\nRemoving one of each cards that appears odd number of times and removing all stars ...\n")
    playable_board = []
    q = {}

    for l in board: # O(n)
        if l != '*':
            if l in q:
                playable_board += [l,l]
                del q[l]
            else:
                q[l] = True

    return playable_board

def is_rigorous(l):
    '''list of str->True
    Returns True if every element in the list appears exactlly 2 times or the list is empty.
    Otherwise, it returns False.

    Precondition: Every element in the list appears even number of times
    '''
    
    cnt = {}

    for c in l: # O(n)
        if not (c in cnt):
            cnt[c] = 0

        cnt[c] += 1

        if cnt[c] == 3:
            return False
    
    return True
                
        

####################################################################3

def play_game(board):
    '''(list of str)->None
    Plays a concentration game using the given board
    Precondition: board a list representing a playable deck
    '''
    if len(board) == 0:
        print('The resulting board is empty.')
        print('Playing Concentration game with an empty board is impossible.')
        print('Good bye')
        return

    print('Ready to play...\n')
    discovered = []
    size = len(board)
    guesses = 0

    print_revealed(discovered, -1, -1, board)

    while len(discovered) != size:
        print('Enter two distinct positions on the board that you want revealed.')
        print('i.e two integers in the range [1, {}]'.format(size))
        p1 = p2 = -1

        while not (0 <= p1 < size):
            p1 = int(input('Enter position 1:')) - 1
        
        while not (0 <= p2 < size):
            p2 = int(input('Enter position 2:')) - 1
        
        doesCount = True

        if p1 in discovered or p2 in discovered:
            print('One or both of your chosen positions has already been paired.')
            doesCount = False
        
        if p1 == p2:
            print('You chose the same positions.')
            doesCount = False
        
        if doesCount:
            print_revealed(discovered, p1, p2, board)
            wait_for_player()

            if board[p1] == board[p2]:
                discovered += [p1, p2]
            
            guesses += 1
        else:
            print('Please try again. This guess did not count. You current number of guesses is {}.'.format(guesses))

        print('')

    print('Congratulations! You completed the game with {} guesses. That is {} more than the best possible.'.format(guesses, guesses - (size // 2)))

def printMsg(msg):
    '''
    (str) -> None
    Prints the welcome message in a box with stars
    '''
    N = len(msg) + 8
    A = N-2
    print('*' * N)

    print('*' + ' ' * A + '*')
    print('* __' + msg + '__ *')
    print('*' + ' ' * A + '*')

    print('*' * N)

def player_choice():
    '''
    int -> str
    Prints a message asking the user to choose option 1 or 2
    '''
    choice = input('Would you like (enter 1 or 2 to indicate your choice): \n (1) me to generate a rigorous deck of cards for you \n (2) or, would you like me to read a deck from a file?\n')

    while choice != '1' and choice != '2':
        choice = input('{} is not an existing option. Please try again. Enter 1 or 2 to indicate your choice:\n'.format(choice))

    return choice

# actually running game now
printMsg('Welcome to my Concentration game')
board = []

if player_choice() == '1':
    print('You chose to have a rigorous deck generated for you.')
    size = 0

    while size < 2 or size > 52 or size % 2 != 0:
        size = int(input('How many cards do you want to play with?\nEnter an even number between 2 and 52: '))

    board = create_board(size)
else:
    print("You chose to load a deck of cards from a file")
    board = clean_up_board(read_raw_board(input("Enter the name of the file: ").strip()))

    joiner = 'and' if is_rigorous(board) else 'but not'

    printMsg('This deck is now playable {} rigorous and it has {} cards.'.format(joiner, len(board)))
    wait_for_player()

shuffle_deck(board)
wait_for_player()
play_game(board)

